package business_logic;import bank_adapter.BankAdapter;import bank_adapter.BankAdapterInterface;import domain.PaymentInfo;import messaging.Event;import messaging.EventReceiver;import messaging.EventSender;/** Author: Boris Grunwald **/public class PaymentRegistration implements EventReceiver {    EventSender sender;    public PaymentRegistration(EventSender sender) {        this.sender = sender;    }    private void initiatePaymentToTheBank(Event event) throws Exception {        try {            PaymentInfo paymentInfo=Event.ParseMessageType(event.getArguments()[0], PaymentInfo.class);            BankAdapterInterface bankAdapterInterface=new BankAdapter();            bankAdapterInterface.bankTransferring(paymentInfo.getCustomerBankID(), paymentInfo.getMerchantBankID(),paymentInfo.getAmount());            Event resultEvent=new Event("finished.payment", new Object[]{paymentInfo});            sender.sendEvent(resultEvent);        }catch (Exception e){            Event errorEvent=new Event("payment.failed", new Object[]{});            errorEvent.setStatusCode(400);            errorEvent.setMessage("Banktransferring faild \n"+e.getMessage());            sender.sendEvent(errorEvent);        }    }    @Override    public void receiveEvent(Event event) throws Exception {        switch (event.getEventType()) {            case "payment.banktransferre":                initiatePaymentToTheBank(event);                break;            default:                System.out.println(event.getEventType() + " was not expected (payment-management)");        }    }}